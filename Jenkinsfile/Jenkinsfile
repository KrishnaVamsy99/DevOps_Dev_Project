pipeline {

    // OS: WINDOWS
    agent any
    
    tools {
        maven 'MAVEN_HOME'
    }
    
    environment {
        DOCKER_USER = 'gvkvamsy99'  // Replace with your Docker Hub username
    }
    
    stages {
        stage('Cloning the dev project') { 
            steps {
                echo 'üì• Cloning Git repository...'
                git branch: 'main', url: 'https://github.com/KrishnaVamsy99/DevOps_Dev_Project.git'
            }
        }
        
        stage('Build the dev code') {
            steps {
                echo 'üõ†Ô∏è Building Java code with Maven...'
                bat 'mvn clean install'
            }
            post {
                success {
                    echo '‚úÖ Archiving artifacts...'
                    archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
                }
            }
        }
        
        stage('Cloning the test project') {  
            steps {
                echo 'üì¶ Packaging application with Maven...'
                bat 'mvn package'
            }
            post {
                success {
                    echo 'üìä Generating test reports...'
                    allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
                    testNG()
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                usernameVariable: 'DOCKER_USER',
                                                passwordVariable: 'DOCKER_PASS')]) {
                    bat '''
                        echo "üê≥ Building Docker image..."
                        docker build -t %DOCKER_USER%/devops-dev-project:%BUILD_NUMBER% .

                        echo "üîë Logging in to DockerHub..."
                        echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin

                        echo "üì§ Tagging image as latest..."
                        docker tag %DOCKER_USER%/devops-dev-project:%BUILD_NUMBER% %DOCKER_USER%/devops-dev-project:latest

                        echo "üì§ Pushing Docker image to DockerHub..."
                        docker push %DOCKER_USER%/devops-dev-project:%BUILD_NUMBER%
                        docker push %DOCKER_USER%/devops-dev-project:latest
                    '''
                }
            }
        }
        
        stage('Pull & Run Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                usernameVariable: 'DOCKER_USER',
                                                passwordVariable: 'DOCKER_PASS')]) {
                    bat '''
                        echo "üîë Logging in to DockerHub..."
                        echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin

                        echo "üì• Pulling Docker image from DockerHub..."
                        docker pull %DOCKER_USER%/devops-dev-project:%BUILD_NUMBER% || exit 0

                        echo "üßπ Cleaning up existing container..."
                        docker stop devops-container || exit 0
                        docker rm devops-container || exit 0

                        echo "üöÄ Running Docker container..."
                        docker run -d --name devops-container -p 8082:8080 %DOCKER_USER%/devops-dev-project:%BUILD_NUMBER%

                        echo "‚è≥ Waiting for container to start..."
                        timeout /T 10

                        echo "üß™ Testing application..."
                        curl http://localhost:8082 || echo "Test failed"
                    '''
                }
            }
            post {
                always {
                    bat '''
                        echo "üßπ Cleaning up container..."
                        docker stop devops-container || exit 0
                        docker rm devops-container || exit 0
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üèÅ Pipeline completed'
        }
    }
}

/*
OS - UNIX/LINUX Distributions
pipeline {
    agent any
    
    tools {
        maven 'MAVEN_HOME'
    }
    
    environment {
        DOCKER_USER = 'gvkvamsy99'
    }
    
    stages {
        stage('Cloning the dev project') { 
            steps {
                echo 'üì• Cloning Git repository...'
                git branch: 'main', url: 'https://github.com/KrishnaVamsy99/DevOps_Dev_Project.git'
            }
        }
        
        stage('Build the dev code') {
            steps {
                echo 'üõ†Ô∏è Building Java code with Maven...'
                sh 'mvn clean install'
            }
            post {
                success {
                    echo '‚úÖ Archiving artifacts...'
                    archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
                }
            }
        }
        
        stage('Cloning the test project') {  
            steps {
                echo 'üì¶ Packaging application with Maven...'
                sh 'mvn package'
            }
            post {
                success {
                    echo 'üìä Generating test reports...'
                    allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
                    testNG()
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                usernameVariable: 'DOCKER_USER',
                                                passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "üê≥ Building Docker image..."
                        docker build -t $DOCKER_USER/devops-dev-project:$BUILD_NUMBER .

                        echo "üîë Logging in to DockerHub..."
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

                        echo "üì§ Tagging image as latest..."
                        docker tag $DOCKER_USER/devops-dev-project:$BUILD_NUMBER $DOCKER_USER/devops-dev-project:latest

                        echo "üì§ Pushing Docker image to DockerHub..."
                        docker push $DOCKER_USER/devops-dev-project:$BUILD_NUMBER
                        docker push $DOCKER_USER/devops-dev-project:latest
                    '''
                }
            }
        }
        
        stage('Pull & Run Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                usernameVariable: 'DOCKER_USER',
                                                passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "üîë Logging in to DockerHub..."
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

                        echo "üì• Pulling Docker image from DockerHub..."
                        docker pull $DOCKER_USER/devops-dev-project:$BUILD_NUMBER || true

                        echo "üßπ Cleaning up existing container..."
                        docker stop devops-container || true
                        docker rm devops-container || true

                        echo "üöÄ Running Docker container..."
                        docker run -d --name devops-container -p 8082:8080 $DOCKER_USER/devops-dev-project:$BUILD_NUMBER

                        echo "‚è≥ Waiting for container to start..."
                        sleep 10

                        echo "üß™ Testing application..."
                        curl http://localhost:8082 || echo "Test failed"
                    '''
                }
            }
            post {
                always {
                    sh '''
                        echo "üßπ Cleaning up container..."
                        docker stop devops-container || true
                        docker rm devops-container || true
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üèÅ Pipeline completed'
        }
    }
}
*/
